import pkg from "@google/genai";
const { GoogleGenAI } = pkg;
import ProductModel from "../models/product.model.js";

// Nh·∫≠p API key t·ª´ Google AI Studio
const ai = new GoogleGenAI({ apiKey: "AIzaSyBnu-3JGy8VUuXuSXRZXe_rmwEczC8NJKM" });

export async function generateText(req, res) {
    try {
        const { message } = req.body;
        if (!message) return res.status(400).json({ error: "Message is required" });
        
      // L·∫•y to√†n b·ªô s·∫£n ph·∫©m t·ª´ database
        const allProducts = await ProductModel.find();
        // console.log("üì¶ Danh s√°ch s·∫£n ph·∫©m t·ª´ DB:", allProducts, "s·∫£n ph·∫©m");
        const normalizedMessage = message.toLowerCase();
        const keywords = normalizedMessage.split(/\s+/);
        if (normalizedMessage.includes("tu·∫•n s∆°n")) {
            return res.json({ reply: "Tu·∫•n S∆°n l√† ch·ªß c·ª≠a h√†ng." });
        }

        // T√¨m s·∫£n ph·∫©m c√≥ t√™n kh·ªõp ho√†n to√†n v·ªõi message
        let foundProducts = allProducts.filter(product =>
            normalizedMessage.includes(product.name.toLowerCase())
        );
        
        // N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o, t√¨m theo t·ª´ kh√≥a
        if (foundProducts.length === 0) {
            foundProducts = allProducts.filter(product =>
                keywords.some(keyword => product.name.toLowerCase().includes(keyword))
            );
        }

        // Gi·ªõi h·∫°n t·ªëi ƒëa 5 s·∫£n ph·∫©m
        const topProducts = foundProducts.slice(0, 5);

        // console.log("‚úÖ K·∫øt qu·∫£ t√¨m ki·∫øm:", JSON.stringify(topProducts, null, 2));

        let productInfo = "";
        if (topProducts.length > 0) {
            productInfo = "D∆∞·ªõi ƒë√¢y l√† c√°c s·∫£n ph·∫©m ph√π h·ª£p v·ªõi t√¨m ki·∫øm c·ªßa b·∫°n:\n";
            productInfo += topProducts.map(p => `- ${p.name}: ${p.price} VND`).join("\n");
        } else {
            productInfo = "Hi·ªán t·∫°i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p.";
        }


        // T·∫°o prompt v·ªõi th√¥ng tin s·∫£n ph·∫©m truy xu·∫•t ƒë∆∞·ª£c
        let prompt;
        if (foundProducts.length === 0){
            prompt = message
        }else{
            prompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n v·ªÅ b√°n h√†ng. H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch t·ª± nhi√™n v√† th√¢n thi·ªán.
        N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn s·∫£n ph·∫©m, h√£y tham kh·∫£o danh s√°ch s·∫£n ph·∫©m d∆∞·ªõi ƒë√¢y:
        ${productInfo}
        
        C√¢u h·ªèi c·ªßa kh√°ch h√†ng: "${message}"`;
        }
        // G·ªçi model AI
        const response = await ai.models.generateContentStream({
            model: "gemini-2.0-flash",
            contents: prompt 
        });

        let reply = "";
        for await (const chunk of response) {
            reply += chunk.text;
        }

        res.json({ reply });
    } catch (error) {
        console.error("AI Error:", error);
        res.status(500).json({ error: "Internal server error" });
    }
}
